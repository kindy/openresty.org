# Mainline Version 1.4.3.1 - 29 October 2013
* upgraded the Nginx core to 1.4.3.
** see the changes here: http://nginx.org/en/CHANGES-1.4
* upgraded LuaNginxModule to 0.9.1.
** feature: added the new configuration directive [lua_use_default_type](https://github.com/chaoslawful/lua-nginx-module#lua_use_default_type) for controlling whether to send out a default `Content-Type` response header (as defined by the [default_type](http://nginx.org/en/docs/http/ngx_http_core_module.html#default_type) directive). default on. thanks aviramc for the patch.
** feature: now the raw request cosocket returned by [ngx.req.socket(true)](https://github.com/chaoslawful/lua-nginx-module#ngxreqsocket) no longer requires the request body to be read already, which means that one can use this cosocket to read the raw request body data as well. thanks aviramc for the original patch.
** bugfix: when there were no existing `Cache-Control` response headers, `ngx.header.cache_control = nil` would (incorrectly) create a new `Cache-Control` header with an empty value. thanks jinglong for the patch.
** bugfix: the original letter-case of the header name was lost when creating the `Cache-Control` response header via the [ngx.header.HEADER](https://github.com/chaoslawful/lua-nginx-module#ngxheaderheader) API.
** bugfix: [ngx.req.set_header("Host", value)](https://github.com/chaoslawful/lua-nginx-module#ngxreqset_header) would overwrite the value of [$host](http://nginx.org/en/docs/http/ngx_http_core_module.html#var_host) with bad values. thanks aviramc for the patch.
** bugfix: use of [ngx.exit()](https://github.com/chaoslawful/lua-nginx-module#ngxexit) to abort pending subrequests in other "light threads" might lead to segfault or request hang when HTTP 1.0 full buffering is in effect.
** bugfix: removing a request header might lead to memory corruptions. thanks BjÃ¸rnar Ness for the report.
** bugfix: reading [ngx.status](https://github.com/chaoslawful/lua-nginx-module#ngxstatus) might get different values than [$status](http://nginx.org/en/docs/http/ngx_http_core_module.html#var_status). thanks Kevin Burke for the report.
** bugfix: downstream write events might interfere with upstream cosockets that are slow to write to. thanks Aviram Cohen for the report.
** bugfix: the bookkeeping state for already-freed user threads might be incorrectly used by newly-created threads that were completely different, which could lead to bad results. thanks Sam Lawrence for the report.
** bugfix: calling [ngx.thread.wait()](https://github.com/chaoslawful/lua-nginx-module#ngxthreadwait) on a user thread object that is already waited (i.e., already dead) would hang forever. thanks Sam Lawrence for the report.
** bugfix: the alert "zero size buf" could be logged when assigning an empty Lua string ("") to `ngx.arg[1]` in [body_filter_by_lua](https://github.com/chaoslawful/lua-nginx-module#body_filter_by_lua)*.
** bugfix: subrequests initiated by [ngx.location.capture](https://github.com/chaoslawful/lua-nginx-module#ngxlocationcapture)* could trigger unnecessary response header sending actions in the subrequest because our capturing output header filter did not set `r->header_sent`.
** bugfix: the Lua error message for the case that [ngx.sleep()](https://github.com/chaoslawful/lua-nginx-module#ngxsleep) was used in [log_by_lua](https://github.com/chaoslawful/lua-nginx-module#log_by_lua)* was not friendly. thanks Jiale Zhi for the report.
** bugfix: now [ngx.req.socket(true)](https://github.com/chaoslawful/lua-nginx-module#ngxreqsocket) returns proper error when there is some other "light thread" reading the request body.
** bugfix: [header_filter_by_lua](https://github.com/chaoslawful/lua-nginx-module#header_filter_by_lua)*, [body_filter_by_lua](https://github.com/chaoslawful/lua-nginx-module#body_filter_by_lua)*, and [ngx.location.capture](https://github.com/chaoslawful/lua-nginx-module#ngxlocationcapture)* might not work properly with multiple "http {}" blocks in `nginx.conf`. thanks flygoast for the report.
** optimize: made [ngx.re.match](https://github.com/chaoslawful/lua-nginx-module#ngxrematch) and [ngx.re.gmatch](https://github.com/chaoslawful/lua-nginx-module#ngxregmatch) faster for LuaJIT 2.x when there is no submatch captures.
** optimize: pre-allocate space for the Lua tables in various places.
** doc: fixed the context for the [lua_package_path](https://github.com/chaoslawful/lua-nginx-module#lua_package_path) and [lua_package_cpath](https://github.com/chaoslawful/lua-nginx-module#lua_package_cpath) directives. thanks duhoobo for the report.
* upgraded HeadersMoreNginxModule to 0.23.
** bugfix: removing request headers via [more_clear_input_headers](https://github.com/agentzh/headers-more-nginx-module#more_clear_input_headers) might lead to memory corruptions.
** bugfix: [more_set_input_headers](https://github.com/agentzh/headers-more-nginx-module#more_set_input_headers) might overwrite the value of the [$host](http://nginx.org/en/docs/http/ngx_http_core_module.html#var_host) variable with bad values.
** bugfix: [more_set_headers](https://github.com/agentzh/headers-more-nginx-module#more_set_headers) and [more_clear_headers](https://github.com/agentzh/headers-more-nginx-module#more_clear_headers) might not work when multiple "http {}" blocks were used in `nginx.conf`.
** bugfix: eliminated use of C global variables during configuration phase because it might lead to issues when HUP reload failed.
* upgraded SrcacheNginxModule to 0.23.
** bugfix: this module might not work properly with multiple "http {}" blocks in `nginx.conf`.
** bugfix: we might (incorrectly) return 500 in our output filters.
** bugfix: we did not set `r->header_sent` when we want to discard the header in our header filter.
* upgraded RdsJsonNginxModule to 0.12.
** bugfix: in case of multiple "http {}" blocks in `nginx.conf`, our output filters might be disabled even when this module is configured properly.
** bugix: we did not check the `NULL` pointer returned by an Nginx array element allocation.
* upgraded RdsCsvNginxModule to 0.05.
** optimize: we now only register our output filters when this module is indeed used (the only exception is when multiple "http {}" blocks are used).
* upgraded XssNginxModule to 0.04.
** optimize: we now only register our output filters when this module is indeed used (the only exception is when multiple "http {}" blocks are used).
* upgraded EchoNginxModule to 0.49.
** bugfix: [echo_before_body](https://github.com/agentzh/echo-nginx-module#echo_before_body) and [echo_after_body](https://github.com/agentzh/echo-nginx-module#echo_after_body) might now work properly when multiple "http {}" blocks were used in `nginx.conf`.
* upgraded LuaRestyRedisLibrary to 0.17.
** optimize: added an optional argument "n" to [init_pipeline()](https://github.com/agentzh/lua-resty-redis#init_pipeline) as a hint for the number of pipelined commands.
** optimize: use LuaJIT 2.1's new [table.new() primitive](http://repo.or.cz/w/luajit-2.0.git/commit/c8cfca055) to pre-allocate space for Lua tables.
* upgraded LuaRestyUploadLibrary to 0.09.
** bugfix: removed use of the [module()](http://www.lua.org/manual/5.1/manual.html#pdf-module) function to prevent bad side-effects.
** optimize: Removed use of lua tables and [table.concat()](http://www.lua.org/manual/5.1/manual.html#pdf-table.concat) for simple one-line Lua string concatenations.
* upgraded LuaRestyMySQLLibrary to 0.14.
** bugfix: avoided using Lua 5.1's [module()](http://www.lua.org/manual/5.1/manual.html#pdf-module) function for defining our Lua modules because it has bad side effects.
** optimize: added an optional new argument "nrows" to the [query()](https://github.com/agentzh/lua-resty-mysql#query) and [read_result()](https://github.com/agentzh/lua-resty-mysql#read_result) methods, which can speed up things a bit.
** optimize: use LuaJIT v2.1's new [table.new()](http://repo.or.cz/w/luajit-2.0.git/commit/c8cfca055) API to optimize Lua table allocations. when table.new is missing, just fall back to the good old "{}" constructor. this gives 12% overall speed-up for a typical result set with 500 rows when LuaJIT 2.1 is used.
** optimize: eliminated use of [table.insert()](http://www.lua.org/manual/5.1/manual.html#pdf-table.insert) because it is slower than "tb[#tb + 1] = val".
** optimize: switched over to the multi-argument form of [string.char()](http://www.lua.org/manual/5.1/manual.html#pdf-string.char).
** optimize: no longer use Lua tables and [table.concat()](http://www.lua.org/manual/5.1/manual.html#pdf-table.concat) to construct simple query strings.
* upgraded LuaRestyWebSocketLibrary to 0.02.
** optimize: use LuaJIT 2.1's [table.new()](http://repo.or.cz/w/luajit-2.0.git/commit/c8cfca055) to preallocate space for Lua tables, eliminating the overhead of Lua table rehash.
* feature: applied the [proxy_host_port_vars patch](https://github.com/agentzh/ngx_openresty/blob/master/patches/nginx-1.4.3-proxy_host_port_vars.patch) to the Nginx core to make `$proxy_host` and `$proxy_port` accessible for dynamic languages like Lua and Perl.
* bugfix: applied the [gzip_flush_bug patch](https://github.com/agentzh/ngx_openresty/blob/master/patches/nginx-1.4.3-gzip_flush_bug.patch) to the Nginx core to fix request hang caused by the [ngx_gzip](http://nginx.org/en/docs/http/ngx_http_gzip_module.html) and [ngx_gunzip](http://nginx.org/en/docs/http/ngx_http_gzip_module.html) modules when using [ngx.flush(true)](https://github.com/chaoslawful/lua-nginx-module#ngxflush), for example. Thanks Maxim Dounin for the review.
* bugfix: applied the [cache_lock_hang_in_subreq patch](https://github.com/agentzh/ngx_openresty/blob/master/patches/nginx-1.4.3-cache_lock_hang_in_subreq.patch) to the Nginx core to fix the request hang when using [proxy_cache_lock](http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_lock) in subrequests and the cache lock timeout happens.
* bugfix: backported Maxim Dounin's [patch](https://github.com/agentzh/ngx_openresty/blob/master/patches/nginx-1.4.3-gzip_buffered_bug.patch) to fix an issue in the [ngx_gzip module](http://nginx.org/en/docs/http/ngx_http_gzip_module.html): it did not clear `r->connection->buffered` when the pending data was already flushed out. this could hang LuaNginxModule's [ngx.flush(true)](https://github.com/chaoslawful/lua-nginx-module#ngxflush) call, for example.
See ChangeLog1004002 for change log for OpenResty 1.4.2.x.