If you haven't downloaded the OpenResty source code tarball, please go to the [Download](Download) page first.

Basically, building and installing OpenResty is as simple as
```
tar xzvf ngx_openresty-VERSION.tar.gz
cd ngx_openresty-VERSION/
./configure --with-luajit
make
make install
```
where `VERSION` should be replaced by a concrete version number of OpenResty, like `0.8.54.6`.
If you have problems while building or want finer control over the building process, please read on.
#Prerequisites
You should have `perl 5.6.1+`, `libreadline`, `libpcre`, `libssl` installed into your system. For Linux, you should also ensure that `ldconfig` is in your PATH environment.
##Debian and Ubuntu users
You're recommended to install the following packages using apt-get:
```
apt-get install libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl make
```
##Fedora and RedHat users
You're recommended to install the following packages using yum:
```
yum install readline-devel pcre-devel openssl-devel
```
##Mac OS X (Darwin) users
You're recommended to install prerequisites PCRE using some package management tool, like [Homebrew](http://mxcl.github.com/homebrew/):
```
brew install pcre
```
Alternatively you can install PCRE from source all by yourself :)

After installing PCRE, you may need to specify the paths for PCRE's headers and libraries to your C compiler and linker, for example,
```
$ ./configure \
             --with-cc-opt="-I/usr/local/include" \
             --with-ld-opt="-L/usr/local/lib" \
             ...
```
assuming that your PCRE is installed under the prefix `/usr/local/`.

See also [Issue #3](https://github.com/agentzh/ngx_openresty/issues/3).

##FreeBSD users
You need to install the following ports:
* devel/gmake
* security/openssl
* devel/pcre
##Solaris 11 users
You need to install the following packages from the official repository:
* gcc-3
* SUNWlibm
Usually it's just as simple as
```
pfexec pkg install gcc-3 SUNWlibm
```
#Build OpenResty
##Download
download the latest ngx_openresty tarball can be fetched from the [Download](Download) page and unpack it like this:
```
tar xzvf ngx_openresty-VERSION.tar.gz
```
where `VERSION` should be replaced by real version numbers like `0.8.54.6`.
##./configure
Then enter the `ngx_openresty-VERSION/` directory, and type the following command to configure:
```
./configure --with-luajit
```
By default, `--prefix=/usr/local/openresty` is assumed. The `--with-luajit` option is strongly recommended because LuaJIT 2.0 can give a nice performance boost in terms of both CPU time and memory footprint and its VM is also fully resume-able, unlike the default standard Lua 5.1 interpreter. Enabling LuaJIT 2.0 should work on Linux, Mac OS X, FreeBSD, Solaris, and others. You should only disable LuaJIT 2.0 when your platform does not support LuaJIT.

You can specify various options, as in
```
./configure --prefix=/opt/openresty \
            --with-luajit \
            --without-http_redis2_module \
            --with-http_iconv_module \
            --with-http_postgres_module \
            -j2
```
All of the Nginx configure file options can be used here, including `--add-module=PATH`. Try `./configure --help` to see more options available.

Errors in running the ./configure script can be found in the file `build/nginx-VERSION/objs/autoconf.err` where `VERSION` should be replaced by a concrete version number of OpenResty, like `0.8.54.6`.
###Notes for Solaris users
For Solaris, it's common to install libraries like OpenSSL to `/lib`, so when it complaints about missing OpenSSL and you have indeed already installed it, specify the `--with-ld-opt='-L/lib'` option.
##make
Now you can compile everything up using the command
```
make
```
If your machine has multiple cores and your `make` supports the jobserver feature, you can compile things in parallel like this:
```
make -j2
```
assuming you have 2 CPU cores.
##make install
If all the previous steps go without problems, you can install OpenResty into your system by typing the command
```
make install
```
On Linux, it often requires `sudo` to gain root access.
